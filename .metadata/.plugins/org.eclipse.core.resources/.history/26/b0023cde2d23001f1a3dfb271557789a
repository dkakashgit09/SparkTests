package com.sparkapp.controller;

import java.io.IOException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.sparkapp.service.SparkService;


@RestController
public class SparkController 
{
	@Autowired
    private SparkService sparkService;
	
	
	@PostMapping("/migratesqltomongo")
	public ResponseEntity<?> migrateSqlToMongo() 
	{
		return sparkService.migrateSqlToMongo();
	}
	
	@PostMapping("/migratemongotosql")
	public ResponseEntity<?> migrateMongoToSql() 
	{
		return sparkService.migrateMongoToSql();
	}
	
	
	@PostMapping("/migratemongotomongo")
	public ResponseEntity<?> migrateMongoToMongo()
	{
		return sparkService.migrateMongoToMongo();
		
	}
	//Read CSV File and store it in MONGO DB
	@PostMapping("/processcsvtomongo")
	public String sparkThroughCsvToMongo() 
	{
		try 
		{
			Resource resource = new ClassPathResource("annual-csv.csv");
			String filePath = resource.getFile().getAbsolutePath();
			
			String res = sparkService.processCsvToMongo(filePath);
		        
		        if (res.equals("Spark")) {
		            return "Error while storing data CSV to MONGO";
		        } else {
		            return "Csv data stored to Mongo DB";
		        }
		    } catch (IOException e) {
		        // Handle IOException if file not found or cannot be accessed
		        e.printStackTrace();
		        return "Error: " + e.getMessage();
		    }
	}
	
	
	@PostMapping("/processcsvfilestomongo")
	public String sparkThroughCsvToMongo(@RequestParam("csvFilePath") String csvFilePath, @RequestParam("csvFilePath2") String csvFilePath2) 
	{

		String res = sparkService.processCsvToMongo(csvFilePath, csvFilePath2);
		if(res== "Spark")
		{
			return "Error while storing CSV DATA";
		}
		else
		{
			return "CSV data stored to MySQL";
		}
	}
	
	//Read CSV File and store it in my SQL
	@PostMapping("/processcsvtosql")
	public String sparkThroughCsvToMySql(@RequestParam("csvFilePath") String csvFilePath) 
	{

		String res = sparkService.processCsvToMySql(csvFilePath);
		if(res== "Spark")
		{
			return "Error while storing data CSV DATA";
		}
		else
		{
			return "CSV data stored to MySQL";
		}
	}
	
	//Read Two CSV Files join as one table and store it in my SQL
	@PostMapping("/processcsvfilestosql")
	public String sparkThroughCsvToMySql(@RequestParam("csvFilePath") String csvFilePath, @RequestParam("csvFilePath2") String csvFilePath2) 
	{

		String res = sparkService.processCsvToMySql(csvFilePath, csvFilePath2);
		if(res== "Spark")
		{
			return "Error while storing CSV DATA";
		}
		else
		{
			return "CSV data stored to MySQL";
		}
	}
	
	//Read Two CSV Files join as one table and store it in my SQL
	@PostMapping("/migratemongotocassandra")
	public String sparkThroughMongoToCassandra() 
	{

		String res = sparkService.migrateMongoToCassandra();
		if(res== "Spark")
		{
			return "Error while migrating mongo to cassandra";
		}
		else
		{
			return "Mongo data migrated to Cassandra";
		}
	}
	
	@PostMapping("/migratecassandratomongo")
	public String sparkThroughCassandraToMongo() 
	{

		String res = sparkService.migrateCassandraToMongo();
		if(res== "Spark")
		{
			return "Error while migrating cassandra to mongo";
		}
		else
		{
			return "Cassandra data migrated to Mongo";
		}
	}
	
	@PostMapping("/modifysql")
	public String modifyDataSql() 
	{

//		String res = sparkService.renameColumnInMySql();
		String res = sparkService.modifyDataInMySql();
		if(res== "Spark" || res== "SQL")
		{
			return "Error while Modifying data";
		}
		else
		{
			return "Modified data stored to MySQL";
		}
	}
	
	
	@PostMapping("/modifyTomongo")
	public String modifyDataMongo() 
	{

		String res = sparkService.modifyDataInMongo();
		if(res== "Spark" || res== "SQL")
		{
			return "Error while Modifying data";
		}
		else
		{
			return "Modified data stored to MongoDB";
		}
	}
	
	@PostMapping("/db2db")
	public String migrateSqlToSql() 
	{

		String res = sparkService.migrateSqlToSql();
		if(res== "Spark" || res== "SQL")
		{
			return "Error while migrating SQL to SQL";
		}
		else
		{
			return "SQL Source data stored to Destination Source SQL ";
		}
	}
	
	
	
}
